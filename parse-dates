#!/usr/bin/env luajit

local R = require 're'

local month_by_name = {
	jan = 1, feb = 2, mar = 3, apr = 4, may = 5, jun = 6,
	jul = 7, aug = 8, sep = 9, oct = 10, nov = 11, dec = 12
}

local day_by_name = { sun = 1, mon = 2, tue = 3, wed = 4, thu = 5, fri = 6, sat = 7 }

local length_by_month = function (month, year)
	local lengths = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
	if month == 2 and (((year % 4 == 0) and (year % 100 ~= 0)) or year % 400 == 0) then
		return 29
	else
		return lengths[month]
	end
end

local date_pattern = R.compile [[

	range <- {| date ( %s* '..' %s* date )^-1 {:consumed: {} :} |}

	date <- {|
		(
			{:en: 'yesterday' / 'today' / 'tomorrow' :}
			/
			{:day: {|
				{:sign: ( 'this' / 'next' / 'last' )^-1 :}
				%s* ( {:len: %d+ :} ordinal_suffix^-1 )^-1
				%s* day_en
			|} :}
			/
			date_ymd / date_en
		)^-1

		(
			%s*
			{:interval: {|
				{:sign: [+-] :}
				%s* {:len: %d+ :}
				%s* {:unit: {'d'}'ay'^-1 / {'w'}'eek'^-1 / {'m'}'onth'^-1 / {'y'}'ear'^-1 :} 's'^-1
			|} :}
		)^-1
	|}

	date_ymd <- {:date_ymd: {|
		( year [-/] )^-1
		{:mon_num: '1'[012] / '0'^-1[1-9] :}
		[-/] day_num
	|} :}

	date_en <- {:date_en: {|
		( mon_en %s+ day_num / day_num %s+ mon_en ) (%s+ year)^-1
	|} :}

	year <- {:year: %d^4 :}

	mon_en <- {:mon_en:
		  { 'jan' } 'uary'   ^-1
		/ { 'feb' } 'ruary'  ^-1
		/ { 'mar' } 'ch'     ^-1
		/ { 'apr' } 'il'     ^-1
		/ { 'may' }
		/ { 'jun' } 'e'      ^-1
		/ { 'jul' } 'y'      ^-1
		/ { 'aug' } 'ust'    ^-1
		/ { 'sep' } 'tember' ^-1
		/ { 'oct' } 'ober'   ^-1
		/ { 'nov' } 'ember'  ^-1
		/ { 'dec' } 'ember'  ^-1
	:}

	day_num <-
		{:day_num: [12][0-9] / [3][01] / [0]^-1[1-9] :}
		ordinal_suffix^-1

	ordinal_suffix <-
		 'st' / 'nd' / 'rd' / 'th'

	day_en <- {:day_en:
		  { 'sun' } 'day'    ^-1
		/ { 'mon' } 'day'    ^-1
		/ { 'tue' } 'sday'   ^-1
		/ { 'wed' } 'nesday' ^-1
		/ { 'thu' } 'rsday'  ^-1
		/ { 'fri' } 'day'    ^-1
		/ { 'sat' } 'urday'  ^-1
	:}

]]

local plus_days = function (dt, n)
	return os.date('*t', os.time(dt) + n * 86400)
end

local normalize = {
	-- date
	function (m)
		if m.en or m.day or m.date_abs then return end
		m.en = 'today'
	end,

	-- en
	function (m)
		if not m.en then return end

		m._date = os.date('*t')

		if m.en == 'yesterday' then
			m._date.day = m._date.day - 1
		elseif m.en == 'tomorrow' then
			m._date.day = m._date.day + 1
		end
		m.en = nil
	end,

	-- day
	function (m)
		if not m.day then return end

		local now = os.date('*t')
		local target, today = day_by_name[m.day.day_en], now.wday

		-- we want to add delta days
		local delta = target - today
		if delta < 0 then delta = delta + 7 end

		if m.day.sign == 'last' then
			delta = delta - 7
			if m.day.len then
				delta = delta - 7 * (m.day.len - 1)
			end
		else
			-- on a friday, "next friday" is a week away
			if target == today and m.day.sign == 'next' then
				delta = 7
			end
			if m.day.len then
				delta = delta + 7 * (m.day.len - 1)
			end
		end

		m._message = 'adding ' .. delta .. ' days'
		m._date = plus_days(now, delta)
		m.day = nil
	end,

	-- date_en
	function (m)
		if not m.date_en then return end

		m._date = os.date('*t')

		local d, _d = m.date_en, m._date
		_d.day = d.day_num
		_d.month = month_by_name[d.mon_en]
		if d.year then
			_d.year = d.year
		end

		m.date_en = nil
	end,

	-- date_ymd
	function (m)
		if not m.date_ymd then return end

		m._date = os.date('*t')
		local d, _d = m.date_ymd, m._date
		_d.day = d.day_num
		_d.month = d.mon_num
		_d.year = d.year

		m.date_ymd = nil
	end,

	-- interval
	function (m)
		if not m.interval then return end

		local delta = m.interval.len
		if m.interval.sign == '-' then
			delta = - delta
		end

		local unit = m.interval.unit
		if unit == 'd' then
			m._date = plus_days(m._date, delta)
		elseif unit == 'w' then
			m._date = plus_days(m._date, 7 * delta)
		elseif unit == 'm' then
			-- there is built-in date magic, but undocumented
			local month = m._date.month + delta
			local year =  m._date.year + math.floor(month / 12)
			month = month % 12
			if month == 0 then
				month = 12
				year = year - 1
			end
			if 0 + m._date.day > length_by_month(month, year) then
				m._date.day = length_by_month(month, year)
			end
			m._date.month, m._date.year = month, year
		elseif unit == 'y' then
			m._date.year = m._date.year + delta
		end

		m.interval = nil
	end,

}

local input = string.gsub(string.lower(table.concat(arg, ' ')), ',', '')
local match = date_pattern:match(input)

if #input ~= match.consumed - 1 then
	if match.consumed == 1 then
		io.stderr:write('Giving up.\n')
		os.exit(-1)
	else
		io.stderr:write('Trying "' .. input:sub(1, match.consumed - 1) .. '"\n')
	end
end
match.consumed = nil

local interval_only = false
if match[2] then
	interval_only = true
	for k, _ in pairs(match[2]) do
		if k ~= 'interval' then
			interval_only = false
			break
		end
	end
end

if interval_only then
	for _, f in pairs(normalize) do
		f(match[1])
	end
	match[2]._date = match[1]._date
	normalize[6](match[2])
else
	for _, f in pairs(normalize) do
		f(match[1])
		if match[2] then
			f(match[2])
		end
	end
end

local t = os.time(match[1]._date)
local t1, t2

if match[2] then
	t2 = os.time(match[2]._date)
	if t > t2 then
		t2, t = t, t2
	end
	t2 = os.date('%Y-%m-%d', t2)
else
	t2 = os.date('%Y-%m-%d', t)
end

repeat 
	t1 = os.date('%Y-%m-%d', t)
	print(t1)
	t = t + 86400
until t1 == t2

