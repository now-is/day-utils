#!/usr/bin/env lua

local R = require 're'
local J = require 'cjson'

local format_pattern = R.compile [[

	segs <- {| seg* |}

	seg <- {|
		{}
		( epoch 
		/ year 
		/ day_long_ordinal 
		/ day_short_ordinal 
		/ day_long 
		/ month 
		/ day_short

		/ month_en_long
		/ day_en_long
		/ month_en_short
		/ day_en_short
		)
		{}
	|} / . seg

	-- 1 to 9
	day_short <-
		{~ [1-9] -> 'day_short' ~}

	-- 10 11 12
	month <-
		{~ ('1'[0-2]) -> 'month' ~}

	-- 13 to 31
	day_long <-
		{~ ('1'[3-9] / '2'%d / '3'[01]) -> 'day_long' ~}

	-- 2000 to 9999
	year <-
		{~ ([2-9]%d^3) -> 'year' ~}

	-- 10000 and above
	epoch <-
		{~ ([1-9]%d^+4) -> 'epoch' ~}

	-- day with ordinal
	day_short_ordinal <-
		{~ (day_short ordinal_suffix) -> 'day_short_ordinal' ~}

	day_long_ordinal <-
		{~ (([12]%d / '3'[01]) ordinal_suffix) -> 'day_long_ordinal' ~}

	ordinal_suffix <-
		'st' / 'nd' / 'rd' / 'th'

	month_en_long <- {~
		( [Jj]'anuary'
		/ [Ff]'ebruary'
		/ [Mm]'arch'
		/ [Aa]'pril'
		/ [Mm]'ay'
		/ [Jj]'une'
		/ [Jj]'uly'
		/ [Aa]'ugust'
		/ [Ss]'eptember'
		/ [Oo]'ctober'
		/ [Nn]'ovember'
		/ [Dd]'ecember'
		) -> 'month_en_long'
	~}

	month_en_short <- {~
		( [Jj]'an'
		/ [Ff]'eb'
		/ [Mm]'ar'
		/ [Aa]'pr'
		/ [Mm]'ay'
		/ [Jj]'un'
		/ [Jj]'ul'
		/ [Aa]'ug'
		/ [Ss]'ep'
		/ [Oo]'ct'
		/ [Nn]'ov'
		/ [Dd]'ec'
		) -> 'month_en_short'
	~}

	day_en_long <- {~
		( [Ss]'unday'
		/ [Mm]'onday'
		/ [Tt]'uesday'
		/ [Ww]'ednesday'
		/ [Tt]'hursday'
		/ [Ff]'riday'
		/ [Ss]'aturday'
		) -> 'day_en_long'
	~}

	day_en_short <- {~
		( [Ss]'un'
		/ [Mm]'on'
		/ [Tt]'ue'
		/ [Ww]'ed'
		/ [Tt]'hu'
		/ [Ff]'ri'
		/ [Ss]'at'
		) -> 'day_en_short'
	~}
]]

local handler = {
	epoch             = function (t) return os.date('%s', t) end,
	year              = function (t) return os.date('%Y', t) end,
	day_long_ordinal  = function (t) return os.date('%dTH', t) end,
	day_short_ordinal = function (t) return os.date('%dTH', t) end,
	day_long          = function (t) return os.date('%d', t) end,
	month             = function (t) return os.date('%m', t) end,
	day_short         = function (t) return os.date('%d', t) end,
	month_en_long     = function (t) return os.date('%B', t) end,
	day_en_long       = function (t) return os.date('%A', t) end,
	month_en_short    = function (t) return os.date('%b', t) end,
	day_en_short      = function (t) return os.date('%a', t) end,
}

local input = table.concat(arg, ' ')
local match = format_pattern:match(input)

print(J.encode(match))

while true do
	local d = io.read()
	if d == nil then break end

	local t = os.time{
		year = 0 + d:sub(1, 4),
		month = 0 + d:sub(6, 7),
		day = 0 + d:sub(9, 10),
	}

	local out = {}
	local cur = 1

	for _, seg in ipairs(match) do
		if cur < seg[1] then
			out[#out+1] = input:sub(cur, seg[1]-1)
		end

		out[#out+1] = handler[seg[2]](t)

		cur = seg[3]
	end
	if cur < #input-1 then
		out[#out+1] = input:sub(cur, #input)
	end
	print(table.concat(out))
end

